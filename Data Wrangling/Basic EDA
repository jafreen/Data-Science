{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tutorial 1A Getting started \n",
    "\n",
    "<br>\n",
    "\n",
    "![](http://i2.wp.com/www.fantasticmaps.com/wp-content/uploads/2013/03/World_Of_Ice_And_Fire.jpg)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "--------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The Jupyter Notebook"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The Jupyter notebook is a valuable tool for data science. The ability to run code as well as document and add diagrams with Markdown, makes it an 'all-in-one' solution to doing analyses and communicating your findings.\n",
    "\n",
    "we are going to run through a few of the features of the notebook and Markdown. It is not a comprehensive discussion of the features at all. But hopefully it will give you enough of a taste so you will consider it worthwile researching further.\n",
    "\n",
    "-------------\n",
    "\n",
    "# 1. Some Basic Notebook Shortcut Keys\n",
    "\n",
    "There are two 'modes' in the Jupyter Notebook. \n",
    "\n",
    "- Hit the 'esc' key for **command mode**, the cell border will turn blue\n",
    "- Hit the 'return' key for **edit mode**, cell border turns green\n",
    "\n",
    "Command mode lets us talk to the Notebook, edit mode is where we write code in the cell.\n",
    "\n",
    "Finally\n",
    "- Hit 'shift' +'return' to run the code. They are side by side on the right of the keyboard. \n",
    "\n",
    "## In command mode (blue border)\n",
    "\n",
    "Key|Function\n",
    "--|--\n",
    "b|create cell below\n",
    "a|create cell above\n",
    "x|cut cell\n",
    "v|paste cell\n",
    "m|change to markdown cell\n",
    "y|change to code cell\n",
    "l|line numbers\n",
    "\n",
    "## Most importantly\n",
    "\n",
    "If you hit the 'esc' key to go into command mode and hit 'h', you will bring up a help page with all the shortcuts.\n",
    "\n",
    "# 2. Markdown\n",
    "\n",
    "Markdown is how you can write text, create links, show images and videos.\n",
    "Markdown is ironically a mark-up language. You might know of other mark-up languages like HTML, where a small number of character combinations are used to indicate formatting of the text.\n",
    "\n",
    "Markdown's set of formatting characters are quite unobtrusive and take little effort to write and don't get in the way of reading it, even in it's raw (unformatted) state.\n",
    "\n",
    "## Headings\n",
    "\n",
    "the '#' key will create headings, with '#' being the biggest up to '######' being the smallest.\n",
    "\n",
    "## Bullet points \n",
    "\n",
    "the '-' will create a bullet point\n",
    "\n",
    "- Bread\n",
    "- Milk\n",
    "- Butter\n",
    "- Cheese\n",
    "\n",
    "### Numbered lists\n",
    "\n",
    "Replace the '-' with numbers (they numbers don't have to be in order), to get a numbered list\n",
    "\n",
    "1. Learn Data Science\n",
    "2. Do Analysis\n",
    "3. Profit!\n",
    "\n",
    "### Links and images\n",
    "\n",
    "Creating links is done with the `[]()` combination. Place the URL in the round brackets and the link text in the square brackets. \n",
    "\n",
    "[Markdown Cheatsheet](https://guides.github.com/pdfs/markdown-cheatsheet-online.pdf) \n",
    "\n",
    "Images uses the same combination with an exclamation mark in front `![]()`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![](http://slatestarcodex.com/blog_images/hit_angel.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are many other tricks with markdown in the Jupyter Notebook as well as Notebook Magics. Look online at the Jupyter Notebook documentation. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3. Pandas basics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First you need to import the pandas library, not the bamboo eating bear... 'Panel Data' "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's import the UFO sightings dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "ufo = pd.read_csv('http://bit.ly/uforeports')\n",
    "ufo.head() "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Learn how to properly indexing columns and rows will speed up you coding process. \n",
    "\n",
    "Check [here](http://pandas.pydata.org/pandas-docs/stable/indexing.html). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "ufo['City'].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "ufo.City.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "ufo[['City','State']].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "ufo.loc[:,'City':'State'].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "ufo.iloc[1:6,2:6]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "ufo.City=='Ithaca'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "ufo.City[ufo.City=='Ithaca']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "ufo[['City','State']][ufo.City=='Ithaca']\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "## Now try importing and indexing yourself \n",
    "\n",
    "Can you import this dataset and find out which country has the highest beer consumption per person?\n",
    "\n",
    "http://apps.who.int/gho/athena/data/xmart.csv?target=GHO/SA_0000001400&profile=crosstable&filter=COUNTRY:*;YEAR:2012&x-sideaxis=COUNTRY;DATASOURCE;ALCOHOLTYPE&x-topaxis=GHO;YEAR\n",
    "\n",
    "The dataset is from WHO:\n",
    "http://apps.who.int/gho/data/node.main.A1026?lang=en"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "Alcohol = pd.read_csv('http://apps.who.int/gho/athena/data/xmart.csv?target=GHO/SA_0000001400&profile=crosstable&filter=COUNTRY:*;YEAR:2012&x-sideaxis=COUNTRY;DATASOURCE;ALCOHOLTYPE&x-topaxis=GHO;YEAR',skiprows=1)\n",
    "Alcohol.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "Alcohol[Alcohol['Beverage Types']==\"Beer\"].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Why it didn't work ? \n",
    "\n",
    "There are white spaces in some of columns !"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "Alcohol[Alcohol['Beverage Types']==\" Beer\"].sort_values([\" 2012\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4. The way of using Pandas \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, a couple of rows have missing city data that I'll drop to simplify what we're doing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "ufo[10:20]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "ufo.dropna(axis = 0,inplace = True,how = 'any')\n",
    "ufo[10:20]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "ufo.reset_index(inplace= True)\n",
    "ufo[10:20]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Creating a new column\n",
    "\n",
    "I want to create a column with the combined City and State place names, I'll create a column called 'place' with an empty string in every row. This isn't absolutely necessary when using proper Pandas methods but for the demonstration it will make it more straight forward."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "ufo['place'] = ''\n",
    "ufo.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Timing it\n",
    "The Notebook magic %%timeit will run the cell 1000 times and get the 3 quickest times."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "%%timeit\n",
    "\n",
    "# Using proper Pandas whole series operations\n",
    "ufo['place'] = ufo['City'] + ', ' + ufo['State']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "ufo.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Do it again "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "ufo['place'] = ''\n",
    "ufo.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "ufo.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "ufo.iloc[0,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "%%timeit\n",
    "\n",
    "# Using a for loop to create each entry in turn\n",
    "for i in ufo.index:\n",
    "    ufo.iloc[i,6] = ufo.iloc[i,1] + ', ' + ufo.iloc[i,4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "ufo.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "\n",
    "### Now you see the difference 0.0009 s vs 1.79 s !!!! (The running time may vary on different computers!)\n",
    "\n",
    "Pandas is based on numpy arrays, so try everything you can to aviod iterating over rows."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Readable Juptyer notebook with Python code\n",
    "\n",
    "### Readability counts!!!\n",
    "\n",
    "As a data scientist you are communicating your insights to others. The reader may not be primarily a programmer. They may work in another language and they may not be a machine learning practitioner. This is why readability is important.\n",
    "\n",
    "We use Python and the Jupyter notebook because they enhance **readability** and your ability to clearly explain your insights. It is important to **put yourself** in the position of **your reader**. You should explain your process so they don't have to spend too long working out what you have done and why.\n",
    "\n",
    "Interestingly, there are a few good programming concepts that conflict with this readability.\n",
    "\n",
    "One is the practice of defining lots of variables and functions at the start of the script. While this makes sense from a code development point of view because there is one place to change a value that might be used throughout the script. But from the point of view of the reader, it means they have to remember what the value of that variable is until it is used, maybe dozens of lines further down in the script. As well as defining the variables in the same section as the code, meaningful variable names will help the reader follow your process. Also do not save many useless dataframes, which confuses your reader and make your code slow too.\n",
    "\n",
    "Another area to consider carefully is not try to amaze your reader with complicated solutions. Think twice when you are writing functions or even classes to perform actions. Simple is better than complex, and complex is better than complicated. Sometimes complex solutions can't be avoided because the problem is complex but consider if a step-by-step procedural approach might be clearer for the reader than an object oriented approach. Again, if you do define functions, defining them just before you use them will be easier on your reader than defining all functions at the start or the end of the script and making them remember how the function operates. \n",
    "\n",
    "On that same topic. Try to use the built in functions of the major libraries rather than writing your own. It is difficult to write code as an individual that is as optimised and versatile as the group that has developed the library. Many open source projects have hundreds of contributors and reviewers. Remember, \"Many eyes make all bugs shallow\". Take advantage of the work the community has done writing documentation and having a consistent interface. Scikit Learn is a great example of this. There is also the possibility that your reader might be familiar with the built in functions of the library you are using and will therefore understand what you are doing with less effort than if you create your own way to do the same task.\n",
    "\n",
    "<br>\n",
    "\n",
    "\n",
    "![](http://images-cdn.moviepilot.com/images/c_fill,h_630,w_1200/t_mp_quality/qlcekpbawgphnvalmzer/game-of-thrones-and-melisandre-let-s-talk-about-necklaces-949671.jpg)\n",
    "\n",
    "One more thing: **\"beautiful is better than ugly\"**. Use headings and sub-headings in the Markdown cells and an introduction to guide your reader. Do not put all your code in one cell. A cell should be a self-contained function unit. \n",
    "\n",
    "Some additional informaiton: it is a good practice to structure your notebook, such as: \n",
    "\n",
    "* Introduction\n",
    "* Notes on Data source, output data, versions of your program etc. \n",
    "* Data preparation steps\n",
    "* Analysis (possibly with visualisation of the results)\n",
    "* Discussion \n",
    "* Conclusions\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "\n",
    "# Home work \n",
    "\n",
    "Please go though those videos !!!! \n",
    "\n",
    "https://www.youtube.com/channel/UCnVzApLJE2ljPZSeQylSEyg"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [conda env:python3]",
   "language": "python",
   "name": "conda-env-python3-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}

